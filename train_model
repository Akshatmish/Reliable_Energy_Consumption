import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
import pickle
import os
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

DATA_FILE = 'household_power_consumption.txt'
MODEL_TARGETS = ['Global_active_power', 'Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3']
MODEL_TYPES = ['lin', 'ridge', 'xgb']

def load_and_prepare_data(sample_size=5000):
    if not os.path.exists(DATA_FILE):
        logger.error(f"Data file '{DATA_FILE}' not found. Please ensure it's in the current directory.")
        raise FileNotFoundError(f"Data file '{DATA_FILE}' not found")

    logger.info("Loading data in chunks...")
    chunks = pd.read_csv(
        DATA_FILE,
        sep=';',
        chunksize=50000,
        low_memory=False
    )

    sampled_data = []
    total_rows = 0

    for chunk in chunks:
        logger.info(f"Processing chunk with {len(chunk)} rows...")
        chunk.replace('?', np.nan, inplace=True)
        chunk.dropna(inplace=True)
        # Explicitly specify date format
        try:
            chunk['datetime'] = pd.to_datetime(
                chunk['Date'] + ' ' + chunk['Time'],
                format='%d/%m/%Y %H:%M:%S'
            )
        except Exception as e:
            logger.error(f"Error parsing datetime: {str(e)}")
            raise
        chunk.drop(['Date', 'Time'], axis=1, inplace=True)

        for col in chunk.columns:
            if col != 'datetime':
                chunk[col] = pd.to_numeric(chunk[col], errors='coerce')
        chunk.dropna(inplace=True)

        chunk['datetime'] = chunk['datetime'].astype('int64') // 10**9

        total_rows += len(chunk)
        sample_fraction = min(sample_size / total_rows, 1.0) if total_rows > 0 else 1.0
        sampled_chunk = chunk.sample(frac=sample_fraction, random_state=42) if sample_fraction < 1 else chunk
        sampled_data.append(sampled_chunk)

        if sum(len(df) for df in sampled_data) >= sample_size:
            break

    data = pd.concat(sampled_data, axis=0)
    if len(data) > sample_size:
        data = data.sample(n=sample_size, random_state=42)
    
    logger.info(f"Loaded dataset with shape: {data.shape}")
    return data

def train_and_save_models(data):
    features = ['datetime', 'Global_reactive_power', 'Voltage', 'Global_intensity']
    X = data[features]

    for target in MODEL_TARGETS:
        logger.info(f"Training models for target: {target}")
        if target not in data.columns:
            logger.error(f"Target column '{target}' not found in dataset")
            raise ValueError(f"Target column '{target}' not found")

        y = data[target]
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

        # Train Linear Regression
        lin_model = LinearRegression()
        lin_model.fit(X_train, y_train)
        lin_path = f'{target}_lin.pkl'
        pickle.dump(lin_model, open(lin_path, 'wb'))
        logger.info(f"Saved Linear Regression model to {lin_path}")

        # Train Ridge Regression
        ridge_model = Ridge()
        ridge_model.fit(X_train, y_train)
        ridge_path = f'{target}_ridge.pkl'
        pickle.dump(ridge_model, open(ridge_path, 'wb'))
        logger.info(f"Saved Ridge Regression model to {ridge_path}")

        # Train XGBoost
        xgb_model = XGBRegressor(n_estimators=30, max_depth=2, random_state=42)
        xgb_model.fit(X_train, y_train)
        xgb_path = f'{target}_xgb.pkl'
        pickle.dump(xgb_model, open(xgb_path, 'wb'))
        logger.info(f"Saved XGBoost model to {xgb_path}")

if __name__ == '__main__':
    try:
        logger.info("Starting model training process...")
        data = load_and_prepare_data()
        train_and_save_models(data)
        logger.info("âœ… All models trained and saved successfully.")
    except Exception as e:
        logger.error(f"Training failed: {str(e)}")
        raise
